#!/usr/bin/env python
import os
import sys
import subprocess
import logging
import signal
import multiprocessing

logging.basicConfig(format="%(asctime)s : %(levelname)s : %(message)s", level=logging.INFO)
logger = logging.getLogger()

cpu_count = multiprocessing.cpu_count()

model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', cpu_count//2))


def sigterm_handler(nginx_pid, gunicorn_pid):
    """
    Hand the singterm of the ngins pid and gunicorn pid, if there is an error while
    quiting the signal or siterm
    """
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)


def start_serve():

    logger.info("Starting Pytorch mnist digits recognition server.")
    # Get PORT
    port_env = os.popen("envsubst '$PORT' < /opt/ml/input/config/nginx.conf.temp >> /opt/ml/input/config/nginx.conf")

    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    logger.info("Starting nginx and gunicorn server")
    # start nginx server
    nginx = subprocess.Popen(['nginx', '-c', '/opt/ml/input/config/nginx.conf'])

    # Start gunicorn server
    gunicorn = subprocess.Popen(['gunicorn',
                                '--timeout', str(model_server_timeout),
                                '-k', 'gevent',
                                '-b', 'unix:/tmp/gunicorn.sock',
                                '-w', str(model_server_workers),
                                'wsgi:app',
                                '--log-level', 'INFO'])

    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # If either subprocess exits, so do we.
    pids = set([nginx.pid, gunicorn.pid])

    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(nginx.pid, gunicorn.pid)
    logger.info('Inference server exiting')

if __name__ == "__main__":
    start_serve()